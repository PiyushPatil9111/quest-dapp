<%- include partials/header.ejs %>

<div class="container mt-4">
  <h1>Welcome to Quest DApp</h1>
  
  <!-- Wallet Connection -->
  <div class="card mt-4">
    <div class="card-header">Connect Your Wallet</div>
    <div class="card-body">
      <button id="connectWallet" class="btn btn-primary">Connect MetaMask</button>
      <p id="walletStatus" class="mt-2">Not connected</p>
      <button id="checkVault" class="btn btn-info btn-sm">Check Vault Status</button>
    </div>
  </div>

  <!-- Create Goal Form -->
  <div class="card mt-4" id="goalForm" style="display:none;">
    <div class="card-header">Create Savings Goal</div>
    <div class="card-body">
      <form id="createGoal">
        <div class="form-group">
          <label>Target Amount (fUSDC)</label>
          <input type="number" class="form-control" id="goalAmount" required>
        </div>
        <div class="form-group">
          <label>Deadline (days)</label>
          <input type="number" class="form-control" id="goalDeadline" required>
        </div>
        <button type="submit" class="btn btn-success">Create Goal</button>
      </form>
    </div>
  </div>

  <!-- Main DApp Section -->
  <div class="card mt-4" id="dappSection" style="display:none;">
    <div class="card-header">Your Quest Info</div>
    <div class="card-body">
      <h5>Wallet: <span id="userAddress"></span></h5>
      <h5 class="mt-2">fUSDC Balance: <span id="fusdcBalance">Loading...</span></h5>
      <button id="getTokensBtn" class="btn btn-info btn-sm mt-1">Get 200 Test fUSDC</button>
      <hr>
      <h5>Vault Status: <span id="vaultStatus">No active vault</span></h5>
      <div id="vaultDetails" style="font-size: 0.9em;"></div>
      <div id="vaultActions" class="mt-3">
        <button id="completeBtn" class="btn btn-success me-2">Complete Goal</button>
        <button id="withdrawBtn" class="btn btn-warning">Withdraw Early</button>
      </div>
      <hr>

      <!-- Deposit Section -->
      <div id="depositForm" style="display:none;">
        <h5>Deposit fUSDC</h5>
        <div class="form-group">
          <label>Amount to Deposit</label>
          <input type="number" class="form-control" id="depositAmount" placeholder="e.g., 5">
        </div>
        <button id="approveBtn" class="btn btn-warning mr-2">1. Approve fUSDC</button>
        <button id="depositBtn" class="btn btn-success" disabled>2. Deposit</button>
        <p id="depositMsg" class="mt-2 text-muted"></p>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/6.13.1/ethers.umd.min.js"></script>
<script>
  // Basic setup
  let provider, signer, userAddress, fUSDCContract, questVaultContract;
  const fUSDCAddress = "0x5F0AfDa16217dB4F9077b7c6666E24B20963788C";
  const questVaultAddress = "0xb0Fa7F35cA1115faB50f887EfF75a2e28309BBe5";
  const fUSDCDecimals = 6;

  // Keep your existing ABIs here
  const fUSDCAbi = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "allowance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "needed",
				"type": "uint256"
			}
		],
		"name": "ERC20InsufficientAllowance",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "balance",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "needed",
				"type": "uint256"
			}
		],
		"name": "ERC20InsufficientBalance",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "approver",
				"type": "address"
			}
		],
		"name": "ERC20InvalidApprover",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "receiver",
				"type": "address"
			}
		],
		"name": "ERC20InvalidReceiver",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			}
		],
		"name": "ERC20InvalidSender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "ERC20InvalidSpender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "OwnableInvalidOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "OwnableUnauthorizedAccount",
		"type": "error"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
] // FUSD ABI
  const questVaultAbi = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_fUSDC_address",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "DepositMade",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amountReturned",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "bonus",
				"type": "uint256"
			}
		],
		"name": "GoalCompleted",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "target",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "deadline",
				"type": "uint256"
			}
		],
		"name": "VaultCreated",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amountReturned",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "penalty",
				"type": "uint256"
			}
		],
		"name": "WithdrewEarly",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "PENALTY_PERCENT",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "TOKEN_DECIMALS",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "checkMyVault",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "target",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "deadline",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "saved",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "active",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "completeGoal",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_targetAmountHuman",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "_days",
				"type": "uint256"
			}
		],
		"name": "createVault",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_amountHuman",
				"type": "uint256"
			}
		],
		"name": "deposit",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "fUSDC",
		"outputs": [
			{
				"internalType": "contract ISimpleERC20",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "penaltyPool",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "userVaults",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "target",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "deadline",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "saved",
				"type": "uint256"
			},
			{
				"internalType": "bool",
				"name": "active",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdrawEarly",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
] // ABI code of QuestVault contract

  // Get DOM elements (keeping original names)
  const connectWalletBtn = document.getElementById('connectWallet');
  const walletStatus = document.getElementById('walletStatus');
  const goalFormDiv = document.getElementById('goalForm');
  const createGoalForm = document.getElementById('createGoal');
  const dappSection = document.getElementById('dappSection');
  const userAddrSpan = document.getElementById('userAddress');
  const fusdcBalanceSpan = document.getElementById('fusdcBalance');
  const getTokensBtn = document.getElementById('getTokensBtn');
  const vaultStatusSpan = document.getElementById('vaultStatus');
  const vaultDetailsDiv = document.getElementById('vaultDetails');
  const depositFormDiv = document.getElementById('depositForm');
  const depositAmountInput = document.getElementById('depositAmount');
  const approveBtn = document.getElementById('approveBtn');
  const depositBtn = document.getElementById('depositBtn');
  const depositMsg = document.getElementById('depositMsg');
  const checkVaultBtn = document.getElementById('checkVault');

  // Connect wallet
  async function connectWallet() {
    if (!window.ethereum) {
      alert('Please install MetaMask!');
      return;
    }

    provider = new ethers.BrowserProvider(window.ethereum);
    await provider.send("eth_requestAccounts", []);
    signer = await provider.getSigner();
    userAddress = await signer.getAddress();

    // Show wallet connected
    walletStatus.textContent = `Connected: ${userAddress.slice(0, 6)}...${userAddress.slice(-4)}`;
    userAddrSpan.textContent = userAddress;
    connectWalletBtn.disabled = true;

    // Setup contracts
    fUSDCContract = new ethers.Contract(fUSDCAddress, fUSDCAbi, signer);
    questVaultContract = new ethers.Contract(questVaultAddress, questVaultAbi, signer);

    // Show main section
    dappSection.style.display = 'block';
    
    // Initially show the goal form
    goalFormDiv.style.display = 'block';

    // Get initial data
    await updateBalance();
    await updateVaultStatus();
  }

  // Update balance
  async function updateBalance() {
    const balance = await fUSDCContract.balanceOf(userAddress);
    fusdcBalanceSpan.textContent = ethers.formatUnits(balance, fUSDCDecimals);
  }

  // Update vault info
  async function updateVaultStatus() {
    const [target, deadline, saved, active] = await questVaultContract.checkMyVault();

    // Get the buttons container
    const vaultActions = document.getElementById('vaultActions');

    if (active) {
        // Show active vault details
        const deadlineDate = new Date(Number(deadline) * 1000);
        vaultStatusSpan.textContent = "Active";
        vaultDetailsDiv.innerHTML = `
            Target: ${ethers.formatUnits(target, fUSDCDecimals)} fUSDC<br>
            Saved: ${ethers.formatUnits(saved, fUSDCDecimals)} fUSDC<br>
            Deadline: ${deadlineDate.toLocaleString()}
        `;
        
        // Show the action buttons when vault is active
        vaultActions.style.display = 'block';
        depositFormDiv.style.display = 'block';
        goalFormDiv.style.display = 'none';
    } else {
        // Clear vault details
        vaultStatusSpan.textContent = "No active vault";
        vaultDetailsDiv.innerHTML = "";
        
        // Hide the action buttons when no active vault
        vaultActions.style.display = 'none';
        depositFormDiv.style.display = 'none';
        goalFormDiv.style.display = 'block';
    }

    // For debugging - log to console
    console.log("Vault active:", active);
    console.log("Goal form display:", goalFormDiv.style.display);
  }

  // Get test tokens
  async function handleGetTokens() {
    getTokensBtn.disabled = true;
    getTokensBtn.textContent = 'Minting...';

    const response = await fetch('/quest/get-tokens', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ address: userAddress })
    });

    if (response.ok) {
      setTimeout(updateBalance, 3000);
    }

    getTokensBtn.disabled = false;
    getTokensBtn.textContent = 'Get 200 Test fUSDC';
  }

  // Create new goal
  async function handleCreateGoal(event) {
    event.preventDefault();
    const amount = document.getElementById('goalAmount').value;
    const days = document.getElementById('goalDeadline').value;

    if (amount <= 0 || days <= 0) {
      alert("Please enter valid numbers");
      return;
    }

    await questVaultContract.createVault(amount, days);
    updateVaultStatus();
  }

  // Approve tokens
  async function handleApprove() {
    const amount = depositAmountInput.value;
    if (amount <= 0) return alert("Enter a valid amount");

    approveBtn.disabled = true;
    const amountWithDecimals = ethers.parseUnits(amount, fUSDCDecimals);
    
    await fUSDCContract.approve(questVaultAddress, amountWithDecimals);
    depositBtn.disabled = false;
    depositMsg.textContent = "Ready to deposit!";
    approveBtn.disabled = false;
  }

  // Deposit tokens
  async function handleDeposit() {
    const amount = depositAmountInput.value;
    if (amount <= 0) return alert("Enter a valid amount");

    depositBtn.disabled = true;
    await questVaultContract.deposit(amount);
    
    updateBalance();
    updateVaultStatus();
    depositBtn.disabled = false;
  }

  // Complete or withdraw from goal
  async function handleCompleteGoal() {
    if (!questVaultContract) return;
    
    try {
        await questVaultContract.completeGoal();
        alert("Goal completed successfully!");
        await updateVaultStatus();
        await updateBalance();
    } catch (error) {
        alert("Couldn't complete goal. Make sure you've met the target and deadline.");
    }
  }

  async function handleWithdrawEarly() {
    if (!questVaultContract) return;
    
    if (confirm("Are you sure? You'll pay a penalty for early withdrawal.")) {
        try {
            await questVaultContract.withdrawEarly();
            alert("Withdrawn successfully!");
            await updateVaultStatus();
            await updateBalance();
        } catch (error) {
            alert("Couldn't withdraw. Please try again.");
        }
    }
  }

  // Add this debug function
  async function debugCheckVault() {
    if (!questVaultContract) {
        alert("Please connect wallet first");
        return;
    }

    const [target, deadline, saved, active] = await questVaultContract.checkMyVault();
    console.log("Vault Status:", {
        target: target.toString(),
        deadline: new Date(Number(deadline) * 1000).toLocaleString(),
        saved: saved.toString(),
        active: active
    });
    
    alert(`Vault active: ${active}\nGoal form display: ${goalFormDiv.style.display}`);
  }

  // Setup event listeners
  connectWalletBtn.onclick = connectWallet;
  getTokensBtn.onclick = handleGetTokens;
  createGoalForm.onsubmit = handleCreateGoal;
  approveBtn.onclick = handleApprove;
  depositBtn.onclick = handleDeposit;
  document.getElementById('completeBtn').onclick = handleCompleteGoal;
  document.getElementById('withdrawBtn').onclick = handleWithdrawEarly;
  checkVaultBtn.onclick = debugCheckVault;

  // Add this at the bottom of your script
  setInterval(() => {
    console.log("Goal form visibility:", goalFormDiv.style.display);
    console.log("Deposit form visibility:", depositFormDiv.style.display);
  }, 5000);
</script>

<%- include partials/footer.ejs %>
<%- include partials/header.ejs %>

<div class="container mt-4">
  <h2>Transfer Tokens</h2>
  
  <div class="card">
    <div class="card-body">
      <button id="connectBtn" class="btn btn-primary mb-3">Connect Wallet</button>
      
      <div id="walletInfo" style="display:none;">
        <p>Wallet: <span id="walletAddress"></span></p>
        <p>Balance: <span id="tokenBalance">0</span> fUSDC</p>
      </div>

      <div id="transferForm" style="display:none;">
        <div class="form-group mb-3">
          <label for="recipientAddress">Recipient Address</label>
          <input type="text" class="form-control" id="recipientAddress" placeholder="0x...">
        </div>
        <div class="form-group mb-3">
          <label for="amount">Amount (fUSDC)</label>
          <input type="number" class="form-control" id="amount" placeholder="Amount to transfer">
        </div>
        <button id="transferBtn" class="btn btn-success">Transfer</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/6.13.1/ethers.umd.min.js"></script>
<script>
  const connectBtn = document.getElementById('connectBtn');
  const walletInfo = document.getElementById('walletInfo');
  const walletAddress = document.getElementById('walletAddress');
  const tokenBalance = document.getElementById('tokenBalance');
  const transferForm = document.getElementById('transferForm');
  const transferBtn = document.getElementById('transferBtn');

  const FUSDC_ADDRESS = "0x5F0AfDa16217dB4F9077b7c6666E24B20963788C";
  let userAddress;
  let fUSDCContract;

  const fUSDCAbi = [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ];

  async function connectWallet() {
    if (!window.ethereum) {
      alert('Please install MetaMask!');
      return;
    }

    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = await provider.getSigner();
      userAddress = await signer.getAddress();
      
      walletAddress.textContent = userAddress.slice(0, 6) + '...' + userAddress.slice(-4);
      walletInfo.style.display = 'block';
      transferForm.style.display = 'block';
      connectBtn.style.display = 'none';

      // Initialize contract with signer
      fUSDCContract = new ethers.Contract(FUSDC_ADDRESS, fUSDCAbi, signer);
      
      // Get and display balance
      await updateBalance();
    } catch (error) {
      console.error('Error connecting wallet:', error);
      alert('Error connecting wallet: ' + error.message);
    }
  }

  async function updateBalance() {
    if (!fUSDCContract || !userAddress) return;
    try {
      const balance = await fUSDCContract.balanceOf(userAddress);
      tokenBalance.textContent = ethers.formatUnits(balance, 6);
    } catch (error) {
      console.error('Error fetching balance:', error);
    }
  }

  async function handleTransfer() {
    const recipient = document.getElementById('recipientAddress').value;
    const amount = document.getElementById('amount').value;

    if (!recipient || !amount) {
      alert('Please enter recipient address and amount');
      return;
    }

    if (!ethers.isAddress(recipient)) {
      alert('Invalid recipient address');
      return;
    }

    transferBtn.disabled = true;
    transferBtn.textContent = 'Transferring...';

    try {
      const amountInSmallestUnit = ethers.parseUnits(amount.toString(), 6);
      
      // Check balance before transfer
      const balance = await fUSDCContract.balanceOf(userAddress);
      if (balance < amountInSmallestUnit) {
        alert('Insufficient balance');
        return;
      }

      const tx = await fUSDCContract.transfer(recipient, amountInSmallestUnit);
      console.log('Transaction sent:', tx.hash);
      
      // Wait for transaction confirmation
      const receipt = await tx.wait();
      console.log('Transaction confirmed:', receipt);
      
      alert('Transfer successful!');
      await updateBalance();
      
      // Clear form
      document.getElementById('recipientAddress').value = '';
      document.getElementById('amount').value = '';
    } catch (error) {
      console.error('Transfer error:', error);
      alert(`Transfer failed: ${error.message}`);
    } finally {
      transferBtn.disabled = false;
      transferBtn.textContent = 'Transfer';
    }
  }

  // Event listeners
  connectBtn.onclick = connectWallet;
  transferBtn.onclick = handleTransfer;

  // Check if wallet is already connected
  window.addEventListener('load', async () => {
    if (window.ethereum) {
      const accounts = await window.ethereum.request({ method: 'eth_accounts' });
      if (accounts.length > 0) {
        connectWallet();
      }
    }
  });
</script>

<%- include partials/footer.ejs %>